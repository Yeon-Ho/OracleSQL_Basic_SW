2020-04-02

+ 인덱스 , Index

 - 색인

 - 테이블의 검색(탐색) 속도 향상을 위한 데이터베이스 객체

 - 테이블의 컬럼을 기준으로 적용하는 객체

 - 하나의 테이블에 여러 개 인덱스 적용 가능

 - 테이블과는 독립적으로 생성되는 오브젝트

 - 테이블의 컬럼에 의존적

 - UNIQUE KEY(유일키 , UK) 제약 사항이 걸린 컬럼은
  인덱스를 자동으로 생성한다.

 - 테이블의 컬럼값을 전부 추출해서 인덱스를 생성한다
 - 인덱스에는 기준컬럼의 값과 원본데이터의 위치를 저장하고 있다.


+ 인덱스 장점

 - 테이블 탐색할 때 전체탐색(FULL SCAN) 횟수를 줄여준다

 - 전체탐색 상황에서도 시스템 성능 저하를 일부분 줄여줄 수 있다.

+ 인덱스 단점

 - 인덱스 객체를 생성하는 데 시간이 필요하다

 - 인덱스 객체를 위한 별도의 공간이 필요하다

 - 검색 성능은 향상되지만 추가 , 삭제 , 수정에는 큰 도움이 되지 않는다.
 - 추가, 삭제 , 수정이 테이블에 발생하면 인덱싱 작업을 다시 수행해야 한다.


+ 인덱스 생성이 필요한 경우

 - 데이터가 많을 때 ( 약 1000건 이상 )

 - WHERE 구문에서 조건으로 특정 컬럼이 많이 사용될 때

 - JOIN 조건(ON 절) 에서 특정 컬럼이 많이 사용될 때


+ 인덱스 생성이 불필요한 경우

 - 데이터가 적을 때 ( 수 천 건 미만)

 - SELECT 보다 INSERT , UPDATE , DELETE 가 빈번한 경우

 - 인덱스가 적용된 조회 결과가 전체 행의 상당 부분을 차지할 때(약 15%)


+ 인덱스 종류

 - Non-Unique INDEX : 중복 허용 인덱스

	CREATE INDEX 인덱스명 ON 테이블명 ( 컬럼명 )


 - Unique INDEX : 중복 비허용 인덱스

	CREATE UNIQUE INDEX 인덱스명 ON 테이블명 ( 컬럼명 )


 - Composite INDEX : 복합 컬럼 인덱스

	CREATE [UNIQUE] INDEX 인덱스명 ON 테이블명 ( 컬럼명1, 컬럼명2, 컬럼명3,...);



	** [] : 있어도되고 생략해도되고


+ 인덱스 재생성 구문

	ALTER INDEX 인덱스명 REBUILD;

 - INSERT , UPDATE , DELETE 가 많이 발생한 테이블은
   기존에 만들어져있는 인덱스와 데이터가 달라지게 된다

 - 인덱스의 효과가 떨어기제 된다 (그래서 인덱스 재생성 해야한다)


+ 인덱스 삭제

 	DROP INDEX 인덱스명;


+ 인덱스 자료사전

 - user_indexes : 인덱스 정보 자료사전

 - user_ind_columns : 인덱싱 컬럼 정보 자료사전

-----------------------------------------------------------------------------------------

+ 뷰 , VIEW

 - 복잡한 쿼리를 간단하게 표현하려는 목적을 가지고 있다.

 - 접근할 수 있는 데이터의 범위(컬럼 수 ) 를 축소시키기 위해 사용하기도 한다
 - 테이블에서 조회되는 컬럼을 제한할 수 있다.

 - 조회결과를 저장하지 않는다
 - VIEW 는 SELECT 쿼리(서브쿼리) 를 텍스트로 저장하고 있다

 - VIEW는 이름만 봐서는 TABLE 인지 VIEW 인지 구분할 수 없다

 - 자료사전들은 대부분 VIEW 이다

 - 뷰를 통해서 원본 테이블에 조회 , 삽입 , 수정 , 삭제 가 가능하다

 
+ 뷰 생성 구문

	CREATE VIEW viewname AS ( 서브쿼리 ); --만들기만 한다
	CREATE OR REPLACE VIEW viewname AS ( 서브쿼리 ); --없으면 생성 있으면 내용 변경
 
	CREATE [OR REPLACE] [FORCE | NOFORCE] VIEW viewname 
	AS ( 서브쿼리 )
	[WITH CHECK OPTION [CONSTRAINT 제약조건] ]
	[WITH READ ONLY] ;

	
	- CREATE : 뷰 생성 코드

	- CREATE OR REPLACE : 뷰 생성 또는 서브쿼리 수정
			같은 이름의 뷰가 있으면 서브쿼리 수정
			같은 이름의 뷰가 없으면 새롭게 생성


	- FORCE : 서브쿼리의 조회대상(테이블)이 존재하지 않아도 뷰를 생성
	- NOFORCE : 서브쿼리의 조회대상(테이블)이 존재해야만 뷰를 생성
	- 둘 다 적지 않으면 NOFORCE로 동작함

	- WITH CHECK OPTION : 제약 조건에 맞는 데이터만 삽입 , 수정 가능하게 설정
		CONSTRAINT 키워드로 제약조건을 넣지 않으면
		 서브쿼리로 조회할 수 있는 데이터만 삽입 , 수정 가능

	- WITH READ ONLY : 조회 전용 뷰로 설정


+ 뷰 삭제 구문

 - DROP VIEW viewname;


+ 뷰 관련 자료사전
	
 - user_views 

--------------------------------------------------------------------------------

+ 시퀀스 , Sequence

 - 연속적인 숫자를 생성하는 객체

 - 정수값으로 생성한다

 - 생성된 숫자는 테이블의 행을 구분하는 PRIMARY KEY로 사용된다

 - 테이블 내에서 유일한 숫자를 자동으로 생성(Auto Increment)할 때 사용한다.

 - 테이블마다 적용할 시퀀스를 각각 따로 생성해서 관리한다
	(테이블 5개면 시퀀스 5개)


+ 시퀀스 생성 구문

	CREATE SEQUENCE 시퀀스명;
	 -> 1 부터 1씩 증가하는 시퀀스를 생성한다.

	
	CREATE SEQUENCE 시퀀스명
	[ START WITH n ]	-- 시작값
	[ INCREMENT BY n]	-- 증가값
	[ MAXVALUE n | NOMAXVALUE ]  -- 최대값
	[ MINVALUE n | NOMINVALUE ]  -- 최소값
	[ CYCLE | NOCYCLE ]     -- 순환구조 여부
	[ CACHE n | NOCACHE ]	-- 미리 생성할 숫자(캐시)의 개수

	
+ 시퀀스 사용 방법(2가지)

 	시퀀스명.currval -- 현재 시퀀스 값

	시퀀스명.nextval -- 다음 시퀀스 값

	ex)	SELECT seq.nextval FROM dual; -- 다음 시퀀스값 조회

	ex)	--시퀀스를 통해서 사원번호 생성하여 자동 부여되게 만들기
		
		INSERT INTO emp (empno , ename)
		VALUES ( seq.nextval , '사원이름' );
 

+ 시퀀스 변경 구문

	ALTER SEQUENCE 시퀀스명
	[ INCREMENT BY n]	-- 증가값
	[ MAXVALUE n | NOMAXVALUE ]  -- 최대값
	[ MINVALUE n | NOMINVALUE ]  -- 최소값
	[ CYCLE | NOCYCLE ]     -- 순환구조 여부
	[ CACHE n | NOCACHE ]	-- 미리 생성할 숫자(캐시)의 개수


	** CREATE SEQUENCE의 START WITH 옵션 빼고 전부 변경 가능
	** SEQUENCE의 현재 진행하는 값을 임의로 바꿀 수 없다


+ 시퀀스 삭제
	DROP SEQUENCE 시퀀스명;

+ 시퀀스 자료사전

 - user_sequences














--------------------------------------
생성 :	CREATE VIEW test_view	
	AS ( 
   	 -- 서브쿼리
	);

실행 :	SELECT * FROM test_view;


** 새로 만들자
WEB_ADMIN

ID : system
PASS : 1234 (비번 저장)
-------------------------------------------
