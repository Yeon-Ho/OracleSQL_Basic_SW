2020-03-31

+ DATE - 자료형

 - 날짜시간타입(datetime)

 - 날짜와 시간을 저장할 수 있는 타입

 - 초단위까지 표현 가능

 - 서식문자를 이용하여 년/월/일,시/분/초 ,오전/오후 등을 표현할 수 있음

 - BC 4712/01/01 ~ 4712/12/31 의 표현범위를 가짐


+ TIMESTAMP - 자료형

 - 날짜시간타입(datetime)

 - DATE 타입의 확장 타입

 - 밀리초까지 표현 가능
 
 - TIMEZONE(시간대) 설정이 들어갈 수 있음


 ** sysdate : DATE타입의 현재 날짜/시간

 ** systimestamp : TIMESTAMP타입의 현재 날짜/시간


+ RR , YY 의 서식 문자의 차이

 - to_char 에서는 아무런 차이가 없다

 - to_date 에서는 현재날짜와 관련하여 인식되는 년도가 달라진다.


 to_date()를 사용하면  

 - YY : 현재 년도의 앞 두자리가 붙는다

	ex) to_date('13/4/6', 'yy/mm/dd')  -> 2013년
	    to_date('83/2/1', 'yy/mm/dd')  -> 2083년  


 - RR : 현재 년도와 입력한 년도에 따라 달라진다

	현재년도	입력년도	결과
	 00 ~ 49	 00 ~ 49	현재 세기(20)
	 00 ~ 49	 50 ~ 99	이전 세기(19)

	 50 ~ 99	 00 ~ 49	다음 세기
	 50 ~ 99	 50 ~ 99	현재 세기

	ex)
	현재날짜	rr로처리	
	2015년		29/03/02 	2029년
	2028년		69/09/13	1969년

	2077년		20/03/31	2120년
	2099년		94/09/07	2094년
	
-------------------------------------------------------------------------------------------

+ LONG - 자료형

 - 가변 길이 문자

 - 최대 길이가 2GB

 - 테이블 당 한개의 컬럼만 지정할 수 있다

 - 테이블 내에 데이터가 저장된다.

+ Lorem Ipsum , 로렘 입숨 : 의미없는 데이터 더미
 -https://www.lipsum.com/

+ 한글 로렘 입숨

 - http://hangul.thefron.me/


+ LOB , Large OBject

 - 가변 길이 타입

 - 최대 4GB 까지 저장 가능

 - 테이블에 여러 컬럼으로 지정할 수 있음

 - 참조형으로 동작한다
 - 테이블에는 데이터의 저장 위치만 기록한다
 - 실제 데이터는 따로 테이블 밖에 저장한다


 - BLOB : 바이너리 , Binary , 이진 데이터 (사진, MP3,등등)

 - CLOB : 문자 , Character , 문자 데이터

 - NCLOB : 문자 , National Character


+ CLOB 데이터 조회하기

 - DBMS_LOB 객체를 이용한다

 - DBMS_LOB.SUBSTR( col , len , offset )
	col - 조회할 LOB 컬럼
	len - 조회할 데이터의 길이
	offset - 조회가 시작되는 오프셋

 - CLOB 데이터 전체 조회하기

	DBMS_LOB.SUBSTR( col, length(col) , 1 )
	-> 첫번째 데이터부터 col 컬럼의 길이만큼 조회하기



+ RAW , LONG RAW  - BLOB 사용하자!

 - 바이너리 데이터를 저장한다

 - 이미지나 사운드 같은 바이너리 파일을 저장할 때 사용하는 데이터타입이다.

 - 이진 데이터가 저장되고 조회 시 16진수로 출력된다

 - 문자로 변환할 수 없다

** BLOB 를 사용하자 (RAW, LONG RAW 대신)

------------------------------------------------------------------------------------------

+ 스키마 , Schema

 - 데이터베이스의 구조

 - 데이터베이스에 대한 메타데이터


+ 데이터베이스를 바라보는 관점에 따라 분류한 스키마

 - 개념스키마 : 전체적인 구조
	DB의 전체적인 논리 구조
	개체들의 관계(Relation),제약조건 등을 나타낸다
	DB에 대한  보안/권한/무결성 등을 정의한 것


 - 내부스키마 : 프로그래머가 바라보는 관점의 데이터베이스 구조
	DB의 물리적인 저장구조
	HDD(하드디스크)에 어떻게 저장되어있는지에 대한 관점


 - 외부스키마 : 사용자관점에서 바라보는 데이터베이스 구조
	SELECT를 수행하여 바라보는 DB 조회된 결과

 
+ 제약사항 ,제약조건, Constraints

 - 테이블에 부적절한 데이터가 입력되는 것을 방지하는 목적으로 
  테이블 컬럼에 설정하는 필터 조건

 - 데이터의 무결성을 유지한다

 	** 데이터 무결성 , Integrity
	  프로그램이 생명주기(Life Cycle)를 거치는 동안 데이터가 정확하고 
	 일관성있는 값을 유지하고 그 값이 보장되는 성격


+ 제약사항 지정하는 방식

 1. CREATE TABLE 구문에 컬럼과 함께 지정하는 방식 
   (컬럼 레벨에서 지정하기) **평가

 2. 생성된 TABLE 에 ALTER TABLE 구문을 이용하여 추가적으로 반영하는 방식
   (테이블 레벨에서 지정하기) **평가


	** 제약사항 종류 , 컬럼레벨 , 테이블 레벨 에서 하는 방법 (시험)

+ 제약사항의 종류

 - NOT NULL
	컬럼의 데이터로 NULL값 을 허용하지 않음
	NULL 데이터 입력할 수 없음
	
	컬럼의 데이터타입과 연계되어 적용되는 제약사항

	ALTER TABLE tablename MODIFY ~ 구문을 이용한다(테이블 레벨에서 지정할려할때)

	ex)	ALTER TABLE cons_03
		--ADD | MODIFY | DROP -- 추가 |변경 |삭제
		MODIFY data NOT NULL;


 - UNIQUE
	컬럼에 중복데이터를 허용하지 않는다
	데이터의 유일성을 확보한다

	** 인덱스를 자동으로 생성한다.

	UNIQUE가 설정된 컬럼은 테이블의 UNIQUE KEY 라고 부른다
	(유일키 , UK)

	NOT NULL을 같이 명시해주는 이유는 UNIQUE자체는 NULL을 허용하기 때문이다.

	ex)
		테이블레벨-
		-- UNIQUE 만드는 방법(1)
		ALTER TABLE cons_03
		ADD CONSTRAINT cons_03_uk UNIQUE (data);

		컬럼레벨-
		-- UNIQUE 만드는 방법(2)
		CREATE TABLE cons_04 (
		    data VARCHAR2(10) CONSTRAINT cons_uk UNIQUE);
		-- UNIQUE 만드는 방법(3)
		CREATE TABLE cons_05 (
 		   data VARCHAR2(10),
 	 	  CONSTRAINT cons05_uk UNIQUE (data) );



 - CHECK
	컬럼에 들어갈 수 있는 데이터의 범위를 지정하는 제약사항

	WHERE절의 조건문과 같은 내용을 제약조건으로 적용시킨다
	(search_condition 항목으로 적용된다)


 - DEFAULT
	데이터를 입력하지 않고 INSERT할 때 입력될 기본값을 지정하는 제약사항

	NOT NULL처럼 컬럼의 추가 정보로 등록된다

	제약사항 항목으로 부여되지 않는다

	-> user_constraints 로 확인할 수 없다 (제약조건정보 자료사전)
	-> user_tab_columns 로 확인해야한다 (테이블 컬럼정보 자료사전)

	명시적으로 null을 INSERT하면 DEFAULT가 동작하지 않는다.

 - PRIMARY KEY
	기본키 , 주키

	테이블을 대표하는 컬럼으로 지정하는 키

	NOT NULL , UNIQUE 제약사항의 특성이 자동으로 부여됨

	NOT NULL , UNIQUE 가 별도의 항목으로 제약사항이 생성되지는 않는다

	PRIMARY KEY 자체가 NOT NULL이면서 UNIQUE 인것이다.
	UNIQUE 속성을 가지고 있어서 인덱스가 자동으로 생성된다

	외래키(FK)들이 참조할 수 있는 자격이 부여된다.	


 - FOREIGN KEY
	외래키 , 보조키

	기본키(PK)를 참조하는 컬럼 또는 컬럼들

	참조하고 있는 컬럼(기본키)과 데이터타입이 일치해야한다.

	** 참조무결성 원칙을 지켜야한다
		외래키는 기본키로 존재하는 값을 가져야 한다
		
		-> 외래키가 참조하고 있는 기본키는 삭제할 수 없다
		-> 외래키들을 전부 지우고 나서 기본키를 삭제할 수 있다.
		-> 외래키의 값을 null로 바꿔도 된다


	** 외래키 지정 구문 마지막에 넣을 수 있는 옵션(2가지)
	
	     1)	ON DELETE SET NULL 옵션
		-> PK 가 삭제되면 자동으로 NULL로 변경됨

	     2)	ON DELETE CASCADE 옵션
		-> PK 가 삭제되면 자동으로 같이 삭제됨

		아무것도 안쓰면 참조무결성 원칙!

		REFERENCES 구문 다음에 
		ON DELETE SET NULL  <- 이런식으로
		ON DELETE CASCADE   <- 이런식으로



+ PK , FK 의 관계

 - 식별관계 , Identifying Relationship	
	FK 가 해당테이블에서 PK 역할을 수행하는 것


 - 비식별관계 ,  Non-Identifying Relationship
	FK 가 해당테이블에서 PK 열할을 수행하지 않는 것

  ex)
	학생테이블		출석테이블
	
	번호 PK			날짜 PK
	이름			번호 PK , FK
				출결상황		-- 식별관계


				출석ID PK
	번호 PK			날짜
	이름			번호 FK
				출결상황		-- 비식별












--------------------------------------------------------------------------------------------
-TABLE COLUMNS RENAME
ALTER TABLE 테이블명 RENAME COLUMN 원래컬럼명 TO 바꿀컬럼명;
--------------------------------------------------------------------------------------------
7839	KING	PRESIDENT		81/11/17	5000		10
